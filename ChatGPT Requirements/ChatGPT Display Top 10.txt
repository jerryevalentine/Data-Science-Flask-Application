Title: Display_top_10 Requirements

Conceptual Requirements for application:
A flask application that displays the top records in a table.
There should be a table with the data from a database table.
A drop-down list box that contains the tables in the database.
A button that says display data that displays the data in the table in the drop-down list box.

NEW FILES NEEDED (please create these):
* display_top_10.html
* display_top_10.py

JIRA
GPT-105 (and linked tasks)

USER STORY: 
As a data scientist,
I want to view the top 10 records in the database,
So that I can see a sample of the data.

TYPE OF CODE/APPLICATION NEEDED:
Flask Application with the python application, HTML page and the use of a library.

FUNCTIONAL REQUIREMENTS:
* Table on the web page that displays the top 10 records of the database table.
* A drop-down list box that contains all the tables in the database.
* A button that displays the data for the table in the drop-down list box in the table (bullet one).
* If a new table is selected from the list box and the button is pressed, the selected table will display the table data.
* please use def fetch_query(self, query).  The query should be SELECT * FROM table_name LIMIT 10.

CODING REQUIREMENTS AND GUIDELINES:
* Must use existing library code.
* Unless absolutely needed the library should not be re-written.
* If a function needs to be updated the signature (parametes passed to the function) must not change, nor the returned item.
* Ideally, only one library item will need to be create or modified.

APPLICATION ARCHITECTURE:
* base.html (already exists) contains the formatting for the other web pages and a navigation pane with the links to the pages.
* display_top_10.html is the page that will contain the functionality.
* The flask application should be called display_top_10.py.
* The library (SQLiteDB.py) is in the libraies folder in the same location as the flask application.  
* The database is located at: db_path = '../Databases/data_science_application.db'


EXISTING DATABASE:
* db_path = '../Databases/data_science_application.db'

EXISTING LIBRARY:
* libraries/SQLiteDB.py

CURRENT FILE AND FOLDER STRUCTURE:

Flask is root for the flask applicatiln
display_top_10.py
├── templates
│   ├──base.html
│   ├──data_science_application_basemodels.html
├── libraies
│   ├──SQLiteDB.py
├── libraies
│   ├──SQLiteDB.py
│   ├──file.html

Databases
│   ├──data_science_application.db


USE/EXPAND EXISTING CODE:
* File name: SQLiteDB.py
* File Type: Python Library
* Code: 

import sqlite3
import pandas as pd
import os

class SQLiteDB:
    def __init__(self, database_path):
        self.database_path = database_path
        self.conn = None

    def connect(self):
        if self.conn is None:
            self.conn = sqlite3.connect(self.database_path)
        return self.conn

    def close(self):
        if self.conn is not None:
            self.conn.close()
            self.conn = None

    def create_database(self, db_name):
        """
        Creates a new SQLite database file.

        Parameters:
        db_name (str): The name of the new database file to create.

        Returns:
        str: The full path to the created database.
        """
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        db_full_path = os.path.join(self.db_path, db_name)
        connection = sqlite3.connect(db_full_path)
        connection.close()
        return db_full_path

    def update_column_type(self, table_name, column_name, new_type):
        """
        Updates the data type of a specific column in a table.

        Parameters:
        table_name (str): The name of the table.
        column_name (str): The name of the column to change.
        new_type (str): The new data type for the column.
        """
        conn = self.connect()
        temp_table_name = f"{table_name}_temp"
        try:
            # Get current table columns
            columns_query = f'PRAGMA table_info("{table_name}");'
            columns_df = pd.read_sql_query(columns_query, conn)
            
            # Create column definitions
            columns = []
            for _, row in columns_df.iterrows():
                col_name = row['name']
                col_type = new_type if col_name == column_name else row['type']
                columns.append(f"{col_name} {col_type}")

            columns_str = ', '.join(columns)

            # Create new table with updated column type
            conn.execute(f"CREATE TABLE {temp_table_name} ({columns_str});")
            
            # Insert data from old table into new table
            conn.execute(f"INSERT INTO {temp_table_name} SELECT * FROM {table_name};")
            
            # Drop old table and rename new table
            conn.execute(f"DROP TABLE {table_name};")
            conn.execute(f"ALTER TABLE {temp_table_name} RENAME TO {table_name};")
            
            conn.commit()
        except sqlite3.OperationalError as e:
            conn.rollback()
            raise Exception(f"Failed to update column type: {e}")
        finally:
            conn.close()

    def get_metadata(self):
        """
        Retrieves a list of all tables in the SQLite database.

        Returns:
        list: A list of table names in the database.
        """
        conn = self.connect()
        query = "SELECT name FROM sqlite_master WHERE type='table';"
        tables_df = pd.read_sql_query(query, conn)
        conn.close()
        return tables_df['name'].tolist()

    def fetch_table_columns(self, table_name):
        """
        Retrieves the column names of a specific table.

        Parameters:
        table_name (str): The name of the table to retrieve columns from.

        Returns:
        list: A list of column names from the table.
        """
        conn = self.connect()
        query = f'PRAGMA table_info("{table_name}");'
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df['name'].tolist()

    def count_missing_values(self, table_name):
        """
        Counts missing values for each column in a table.

        Parameters:
        table_name (str): The name of the table to analyze for missing values.

        Returns:
        dict: A dictionary of column names with the corresponding count of missing values.
        """
        conn = self.connect()
        query = f"SELECT * FROM {table_name};"
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df.isnull().sum().to_dict()

    def delete_missing_values(self, table_name):
        """
        Deletes rows that have missing values in any column in a table.

        Parameters:
        table_name (str): The name of the table from which to delete rows with missing values.

        Returns:
        bool: True if deletion is successful, False otherwise.
        """
        conn = self.connect()
        try:
            # Construct SQL query to delete rows with NULL values
            query = f"DELETE FROM {table_name} WHERE {' OR '.join([f'{col} IS NULL' for col in self.fetch_table_columns(table_name)])};"
            conn.execute(query)
            conn.commit()
            return True
        except sqlite3.Error as e:
            conn.rollback()
            return False, str(e)
        finally:
            conn.close()

    def fetch_query(self, query):
        """
        Executes a raw SQL query and fetches the results as a pandas DataFrame.

        Parameters:
        query (str): The SQL query to execute.

        Returns:
        pd.DataFrame: A DataFrame containing the query results.
        """
        conn = self.connect()
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df

    def fetch_table(self, table_name):
        """
        Fetches all records from a specific table.

        Parameters:
        table_name (str): Name of the table to fetch records from.

        Returns:
        pd.DataFrame: DataFrame containing all records from the table.
        """
        conn = self.connect()
        query = f"SELECT * FROM {table_name}"
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df

    def insert_dataframe_to_db(self, df, table_name):
        """
        Inserts a pandas DataFrame into the SQLite database.

        Parameters:
        df (pandas.DataFrame): The DataFrame containing the data.
        table_name (str): The name of the table to insert data into.
        """
        conn = self.connect()
        df.to_sql(table_name, conn, if_exists='replace', index=False)
        conn.commit()
        conn.close()

    def clear_table(self, table_name):
        """
        Deletes all records from a table.

        Parameters:
        table_name (str): The name of the table to clear.
        """
        conn = self.connect()
        query = f"DELETE FROM {table_name}"
        cursor = conn.cursor()
        cursor.execute(query)
        conn.commit()
        conn.close()

    def delete_record(self, table_name, condition):
        """
        Deletes a record from the table that matches a specific condition.

        Parameters:
        table_name (str): The name of the table.
        condition (str): The SQL condition to specify which records to delete.
        """
        conn = self.connect()
        query = f"DELETE FROM {table_name} WHERE {condition}"
        cursor = conn.cursor()
        cursor.execute(query)
        conn.commit()
        conn.close()

    def update_record(self, table_name, columns, values, condition):
        """
        Updates a record in the table with new values based on a condition.

        Parameters:
        table_name (str): The name of the table.
        columns (list): A list of column names to update.
        values (list): The new values for the specified columns.
        condition (str): The SQL condition to specify which records to update.
        """
        conn = self.connect()
        set_clause = ', '.join([f"{col} = ?" for col in columns])
        query = f"UPDATE {table_name} SET {set_clause} WHERE {condition}"
        cursor = conn.cursor()
        cursor.execute(query, values)
        conn.commit()
        conn.close()

    def insert_record(self, table_name, columns, values):
        """
        Inserts a new record into a table.

        Parameters:
        table_name (str): The name of the table.
        columns (list): A list of column names for the new record.
        values (list): The corresponding values to insert into the columns.
        """
        conn = self.connect()
        columns_str = ', '.join(columns)
        placeholders = ', '.join(['?'] * len(values))
        query = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
        cursor = conn.cursor()
        cursor.execute(query, values)
        conn.commit()
        conn.close()
